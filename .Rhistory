my_colon <- data.frame(x = Colon$X, y = Colon$Y, gene.names = Colon$gene.names)
colon <- data.frame()
colnames(colon) <- Colon(gene.names)
colnames(colon) <- Colon$gene.names
cbind(Colon$X, Colon$Y)
a <- cbind(Colon$X, Colon$Y)
a
View(a)
a[,2001]
Colon$Y
colnames(a) <- c(gene.names, Y)
colnames(a) <- c(Colon$gene.names, Y)
colnames(a) <- c(Colon$gene.names, "Y")
View(a)
a$Y
a <- as.data.frame(a)
table(a$Y)
typeof(a$Y)
View(a)
View(Colon)
View(a)
runApp()
View(a)
runApp()
library(shiny)
runApp()
library(plsgenomics)
Colon
data("Colon")
View(Colon)
typeof(Colon)
class(Colon)
a <- data.frame()
colnames(a) <- c(Colon$gene.names, Y)
colnames(a) <- c(Colon$gene.names, "Y")
a <- data.frame(Colon$X)
colnames(a) <- c(Colon$gene.names, "Y")
colnames(a) <- c(Colon$gene.names)
cbind(a, Colon$Y)
a <- cbind(a, Colon$Y)
View(a)
pwd()
getwd()
saveRDS(a, "colon.rds")
runApp()
install.packages("waiter")
runApp()
getwd
getwd()
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp)()
runApp()
runApp
runApp()
runApp(9)
runApp()
icon(name="floppy-disk")
icon("file-arrow-down")
icon("gear")
icon("disk")
icon("floppy")
runApp()
library(shiny9
library(shiny)
runApp()
library(shiny)
runApp()
specificity_configuration_content <- box(
height = 200,
title = "Configuration",
selectInput(
inputId = "gold_config_specificity",
label = "Select Gold Standard",
choices = NULL
),
selectInput(
inputId = "scores_config_specificity",
label = "Select Test Scores",
choices = NULL
),
sliderInput(
inputId = "threshold_specificity",
label = "Select threshold",
value = 50,
max = 100,
min = 0
),
selectInput(
inputId = "specificity_method",
label = "Select hight-specificity method",
choices = c("SpAUC", "TpAUC")
),
width = 3
)
runApp()
getwd()
dir
ls()
library(shinyFeedback)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
a <- c(1,2,3,4,5,6)
typeof(a)
class(a)
runApp()
a
runApp()
runApp
runApp()
x.p <- CheckGoldStandard(x.p)
xs.levels <- levels(xs)
CheckGoldStandard <- function(xsample, positive=NULL) {
xs=NULL; xs.levels=NULL;
xs <- as.factor(xsample)
xs.levels <- levels(xs)
if (length(xs.levels) !=2 ) {
stop("Error in the Gold Standard: it must be binary")
}
if (!is.null(positive)) {
if (!any(xs.levels == positive)) {
stop("Error in Gold Standard: positive case must be one of the levels")
}
} else {
positive <- xs.levels[2]
}
if (xs.levels[2] != positive) {
xs <- relevel(xs, ref=positive)
}
xs <- (xs == positive)*1
return(xs)}
source("C:/Users/infer/Desktop/programas/FpAUC/R/supp_functions.R", echo=TRUE)
readRDS("./data/colon.rds")
prueba <- readRDS("./data/colon.rds")
ROCpoints(prueba$`Colon$Y`, prueba$Hsa.3004)
runApp()
pHSpoints(prueba$`Colon$Y`, prueba$Hsa.3004, 0.8)
runApp()
icon("floppy-disk")
icon("floppy disk")
icon("floppy-o")
runApp()
prueba <- readRDS("./data/colon.rds")
auc(prueba$`Colon$Y`, prueba$Hsa.3004)
auc_res <- auc(prueba$`Colon$Y`, prueba$Hsa.3004)
auc_res
auc_res + 1
as.numeric(auc_res)
runApp(9)
runApp()
runApp(9)
runApp()
install.packages(ROCpAI)
install.packages("ROCpAI")
runApp()
prueba
FpaucHS(prueba$`Colon$Y`, prueba$Hsa.3004, 0.9)
FpaucHS(prueba$`Colon$Y`, prueba$Hsa.3331, 0.9)
FpaucHS(prueba$`Colon$Y`, prueba$Hsa.40063, 0.9)
FpaucHS(prueba$`Colon$Y`, prueba$Hsa.549, 0.9)
runApp()
tpAUC
library(ROCpAI)
tpAUC
prueba <- readRDS("./data/colon.rds")
prueba
prueba[,c(prueba$`Colon$Y`, prueba$Hsa.3004)]
prueba[,c("Colon$Y", "Hsa.3004")]
prueba.dataframe <- prueba[,c("Colon$Y", "Hsa.3004")]
tpAUC(dataset = prueba.dataframe, low.value = 0.8, up.value = 1)
tpauc.res <- tpAUC(dataset = prueba.dataframe, low.value = 0.8, up.value = 1)
tpauc.res
rownames(tpauc.res)
as.data.frame(tpauc.res)
as.list(tpauc.res)
tpauc.res
str(tpauc.res)
typeof(tpauc.res)
class(tpauc.res)
attributes(tpauc.res)
assays(tpauc.res)
rowData(tpauc.res)
rowRanges(tpauc.res)
colData(tpauc.res)
as.matrix(tpauc.res)
typeof(tpauc.res)
class(tpauc.res)
rowData(tpauc.res)
df.tpauc.res <- rowData(tpauc.res)
df.tpauc.res
df.tpauc.res$metrics
tpauc.res <- tpAUC(dataset = prueba.dataframe, low.value = 0.8, up.value = 1)
tpauc.res[1,]
tpauc.res[1,1]
tpauc.res[,1]
tpauc.res[,2]
tpauc.res[,1]
as.list(tpauc.res[,1])
assays(tpauc.res)
ass.tpauc.res <- assays(tpauc.res)
listData(ass.tpauc.res)
ass.tpauc.res[1]
ass.tpauc.res[3]
ass.tpauc.res["St_pAUC"]
ass.tpauc.res$St_pAUC
getListElement(ass.tpauc.res, 1)
getListElement(ass.tpauc.res, 2)
getListElement(ass.tpauc.res, "St_pAUC")
getListElement(ass.tpauc.res, "pAUC")
ass.tpauc.res[2]
ass.tpauc.res[1]
a <- ass.tpauc.res[1]
a
as.list(a)
a <- as.list(a)
a
a[1]
a[[1]]
a <- a[[1]]
a
a <- a[[1]]
View(a)
a
a[[1]]
View(ass.tpauc.res)
tpauc.res
tpauc.res[[1]]
tpauc.res[1
]
tpauc.res[2]
tpauc.res[4000]
b <- assays(tpauc.res)
b[[1]]
b[[1]][[1]]
b[[1]]$St_pAUC
prueba
name1 <- "Colon$Y"
name2 <- "Hsa.3004"
select(prueba, name1, name2)
library(tidyverse)
select(prueba, name1, name2)
select(prueba, name2, name1)
pointsCurve
View(prueba.dataframe)
tpAUC(dataset = prueba.dataframe,)
tpAUC(dataset = prueba.dataframe, low.value = 0.8, up.value = 1)
prueba.print <- tpAUC(dataset = prueba.dataframe, low.value = 0.8, up.value = 1)
print(prueba.print)
prueba.dataframe
tpauc.res
tpauc.assays <- assays(tpauc.res)
tpauc.assays
tpauc.list <- tpauc.assays[[1]]
tpauc.list
tpauc.assays[[1]][[1]]
as.numeric(tpauc.assays[[1]][[1]])
typeof(tpauc.assays[[1]][[1]])
typeof(tpauc.assays[[1]][1])
typeof(tpauc.assays[1][[1]])
typeof(tpauc.assays[1][1])
typof(tpauc.assays[[1]])
typeof(tpauc.assays[[1]])
tpauc.assays[[1]]
typeof(tpauc.assays)
tpauc.assays[[1]]
tpauc.assays[[1]][[1]]
tpauc.assays[[1]][[1]][[1]]
tpauc.assays
tpauc.assays[[1]]
tpauc.assays[[1]]$St_pAUC
prueba.list <- list()
var.name <- "columna"
prueba.list[["sensitivity"]] <- list()
prueba.list
prueba.list[["sensitivity"]]
prueba.list[["sensitivity"]][[var.name]] <- "variable"
prueba.list
prueba.list[["sensitivity"]]
p <- readRDS("./data/colon.rds")
p[["Colon$Y"]]
p$`Colon$Y`
library(shiny)
l <- list
l <- list()
l$a
l[["a"]]
library(shinyFeedback)
library(shiny)
runApp()
library(shinyWidgets)
runApp()
a <- list(a = 1, b =2)
lista <- list(a = 1, b =2)
names(lista)
runApp()
names(lista)
runApp()
library(shiny)
d6_results <- c(1,2,3,4,5,6)
results_table <- expand.grid(d6_results, d6_results, d6_results)
View(results_table)
6*6*6
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results)
View(results_table)
6*6*6*6
View(results_table)
results_table$suma <- sum(results_table$Var1 + results_table$Var2 + results_table$Var3)
View(results_table)
results_table$suma <- rowSums(results_table)
View(results_table)
results_table$suma <- sum(results_table$[,1:3])
results_table$suma <- sum(results_table[,1:3])
View(results_table)
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results)
results_table$suma <- sum(results_table[,1:3])
View(results_table)
results_table$suma <- results_table$Var1 + results_table$Var2 + results_table$Var3
View(results_table)
table(results_table$suma)
a <- table(results_table$suma)
a
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results, d6_results, d6_results, d6_results)
View(results_table)
results_table$suma <- sum(result[,1:7])
results_table$suma <- sum(results_table[,1:7])
View(results_table)
results_table$suma <- rowSums(resu)
results_table$suma <- rowSums(results_table)
View(results_table)
rowSums(results_table)
results_table <- as.data.frame(results_table)
results_table$suma <- rowSums(results_table)
rowSums(results_table)
# 24,5
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
results_table$suma <- rowSums(results_table)
rowSums(results_table)
a <- table(results_table$suma)
a
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
View(results_table)
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
View(results_table)
colon <- readRDS("C:/Users/infer/Desktop/programas/FpAUC/data/colon.rds")
View(colon)
b <- readRDS("C:\Users\infer\Desktop\Master\Machine_learning\Entregables\Entrega_1")
b <- readRDS("C:/Users/infer/Desktop/Master/Machine_learning/Entregables/Entrega_1")
b <- readRDS("C:/Users/infer/Desktop/Master/Machine_learning/Entregables/Entrega_1/dataPracticaML21_22.rds")
View(b)
for (a in length(results_table)) {
print(a)
}
for (a in length(results_table[1,])) {
print(a)
}
for (a in length(results_table[,1])) {
print(a)
}
for (row in length(results_table[,1])) {
print(min(results_table[row,]))
}
for (row in length(results_table[,1])) {
print(min(results_table[row,]))
}
for (row in length(results_table[,1])) {
print(min(results_table[row,]))
}
for (row in seq(length(results_table[,1]))) {
print(min(results_table[row,]))
}
# drop the lowest
results_new <- data.frame()
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
View(results_table)
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,]))
}
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
}
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
print(min_value)
}
View(results_table)
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
append(min_value)
}
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
append(results_new, min_value)
}
min_value
results_new
# drop the lowest
results_new <- list()
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
append(results_new, min_value)
}
results_new
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
append(results_new, min_value)
}
View(results_new)
# apunto los resultados de un d6
d6_results <- c(1,2,3,4,5,6)
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
# drop the lowest
results_new <- c()
for (row in seq(length(results_table[,1]))) {
min_value <- min(results_table[row,])
append(results_new, min_value)
}
for (row in seq(length(results_table[,1]))) {
append(results_new, min(results_table[row,]))
}
# drop the lowest
results_new <- c()
for (row in seq(length(results_table[,1]))) {
append(results_new, min(results_table[row,]))
}
# drop the lowest
results_table$min <- min(results_table[:,])
# drop the lowest
results_table$min <- min(results_table[1:,])
# drop the lowest
results_table$min <- min(results_table[1:])
apply(results_table, 1, FUN = min)
# apunto los resultados de un d6
d6_results <- c(1,2,3,4,5,6)
# tabla de posibilidades
results_table <- expand.grid(d6_results, d6_results, d6_results, d6_results)
results_table <- as.data.frame(results_table)
# drop the lowest
results_table$min <- apply(results_table, 1, FUN = min)
results_table$Var1 + results_table$Var2
sum(results_table$Var1, results_table$Var2)
# sum of values - lowest
results_table$result <- results_table$Var1 + results_table$Var2 + results_table$Var3 + results_table$Var4 - results_table$min
View(results_table)
# tabla de frecuencias
table(results_table$result)
# tabla de frecuencias
plot(table(results_table$result))
15*3 + 24
# tabla de frecuencias
t.freq <- as.data.frame(table(results_table$min))
View(t.freq)
# tabla de frecuencias
t.freq <- as.data.frame(table(results_table$result))
View(t.freq)
t.pos <- sum(t.freq$Freq)
t.pos
View(t.freq)
t.freq$prob <- t.freq$Freq / t.pos
t.freq$val_prob <- t.freq$Var1 * t.freq$prob
t.freq$val_prob <- as.numeric(t.freq$Var1) * as.numeric(t.freq$prob)
sum(t.freq$val_prob)
View(results_table)
t.pos
3 * .0007716049
4 * 0.0030864198
# tabla de frecuencias
t.freq <- as.data.frame(table(results_table$result))
View(t.freq)
t.freq$prob <- t.freq$Freq / t.pos
t.freq$val_prob <- t.freq$Var1 * t.freq$prob
typeof(t.freq$Var1)
typeof(t.freq$prob)
t.freq$val_prob <- as.numeric(t.freq$Var1 * t.freq$prob)
typeof(t.freq)
typeof(t.freq$Var1)
class(t.freq$Var1)
# tabla de frecuencias
t.freq <- as.data.frame(table(results_table$result), stringsAsFactors = F)
t.pos <- sum(t.freq$Freq)
t.freq$prob <- t.freq$Freq / t.pos
t.freq$val_prob <- t.freq$Var1 * t.freq$prob
# tabla de frecuencias
t.freq <- as.data.frame(table(results_table$result), stringsAsFactors = F)
t.pos <- sum(t.freq$Freq)
t.freq$prob <- t.freq$Freq / t.pos
t.freq$val_prob <- t.freq$Var1 * t.freq$prob
class(t.fre$Var1)
class(t.freq$Var1)
t.freq$val_prob <- as.numeric(t.freq$Var1) * as.numeric(t.freq$prob)
sum(t.freq$val_prob)
mean(15,15,15,8,8,8)
mean(c(15,15,15,8,8,8))
sum(t.freq$val_prob) - mean(c(15,15,15,8,8,8))
